{"version":3,"sources":["App.js","index.js"],"names":["RandomQuoteMachine","props","state","text","author","data","handleClick","bind","a","fetch","response","json","ran","Math","floor","random","length","this","setState","quotecolor","ran2","rancolor","$","css","id","NQButton","React","Component","QuotePage","href","className","onClick","AppWrapper","console","log","document","ready","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9486c8ed.chunk.js","sourcesContent":["import React from 'react'\r\nimport $ from 'jquery'\r\nimport './App.css'\r\n\r\nclass RandomQuoteMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: \"\",\r\n      author: \"\",\r\n      data: []\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  async componentDidMount() { \r\n    // componentDidMount() is called after react first renders\r\n    // if editing state and rerendering, how does it avoid loops?\r\n    const response = await fetch(\"https://type.fit/api/quotes\");\r\n    const data = await response.json();\r\n    let ran = Math.floor(Math.random() * data.length);\r\n    this.setState({\r\n      text: data[ran].text,\r\n      author: data[ran].author,\r\n      data: data\r\n    });   \r\n  }\r\n\r\n  async handleClick() {\r\n    // Improvements for next vs,\r\n    // how to avoid fetching again with every click\r\n    const response = await fetch(\"https://type.fit/api/quotes\");\r\n    const data = await response.json();\r\n    let ran = Math.floor(Math.random() * data.length);\r\n    this.setState({\r\n      text: this.state.data[ran].text,\r\n      author: this.state.data[ran].author\r\n    });\r\n    \r\n    const quotecolor = [\r\n      \"#36486b\",\r\n      \"#618685\",\r\n      \"#4040a1\",\r\n      \"#f18973\",\r\n      \"#bc5a45\",\r\n      \"#50394c\",\r\n      \"#80ced6\",\r\n      \"#ffef96\",\r\n      \"#405d27\",\r\n      \"#b5e7a0\",\r\n      \"#feb236\",\r\n      \"#d64161\",\r\n      \"#ff7b25\"\r\n    ];\r\n    \r\n    const ran2 = Math.floor(Math.random() * (quotecolor.length - 1 - 0) + 0);\r\n    \r\n    const rancolor = quotecolor[ran2];    \r\n\r\n    $(function(){\r\n      $(\"body\").css(\"background-color\", rancolor);\r\n      $(\"#quotestand\").css(\"color\", rancolor);\r\n      $(\"button\").css(\"background-color\", rancolor);\r\n      $(\"button\").css(\"color\", \"white\");\r\n      $(\"#icons\").css(\"color\", rancolor);\r\n      $(\"#tw-icon\").css(\"color\", rancolor); \r\n      $(\"#tb-icon\").css(\"color\", rancolor);\r\n      $(\"h2\").css(\"fontSize\", \"50px\");\r\n    });\r\n  \r\n  \r\n  }  \r\n  \r\n  render() {\r\n    return (\r\n      <section id=\"sectionContainer\">\r\n        <div id=\"quote-box\">\r\n          <QuotePage\r\n            id=\"QuotePage\"\r\n            text={this.state.text}\r\n            author={this.state.author}\r\n            NQButton={this.handleClick}\r\n          />\r\n        </div>\r\n        <p id=\"sign\">\r\n          by jasonr27 for freeCodeCamp.org Front End Certification\r\n        </p>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nconst QuotePage = (props) => {\r\n  return (\r\n    <div id=\"quotestand\">\r\n      <h1 id=\"text\">{props.text}</h1>\r\n      <p id=\"author\">{\"--- \" + props.author}</p>\r\n      <div id=\"iconsButtonLine\">\r\n        <div id=\"icons\">\r\n          <a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\">\r\n            <i id=\"tw-icon\" className=\"fab fa-twitter\"></i>\r\n          </a>\r\n          <a href=\"tumblr.com\">\r\n            <i id=\"tb-icon\" className=\"fab fa-tumblr-square\"></i>\r\n          </a>\r\n        </div>\r\n        <button id=\"new-quote\" className=\"btn\" onClick={props.NQButton}>\r\n          New Quote\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nclass AppWrapper extends React.Component {\r\n  render() {\r\n    return (\r\n      <section id=\"AppWrapper\">\r\n        <RandomQuoteMachine id=\"RQM\" />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nconst quotecolor = [\r\n  \"#36486b\",\r\n  \"#618685\",\r\n  \"#4040a1\",\r\n  \"#f18973\",\r\n  \"#bc5a45\",\r\n  \"#50394c\",\r\n  \"#80ced6\",\r\n  \"#ffef96\",\r\n  \"#405d27\",\r\n  \"#b5e7a0\",\r\n  \"#feb236\",\r\n  \"#d64161\",\r\n  \"#ff7b25\"\r\n];\r\n\r\nconst ran = Math.floor(Math.random() * (quotecolor.length - 1 - 0) + 0);\r\n\r\nconst rancolor = quotecolor[ran];\r\n\r\nconsole.log(rancolor);\r\n\r\n$(document).ready(function () {\r\n  $(\"body\").css(\"background-color\", rancolor);\r\n  $(\"#quotestand\").css(\"color\", rancolor);\r\n  $(\"button\").css(\"background-color\", rancolor);\r\n  $(\"button\").css(\"color\", \"white\");\r\n  $(\"#icons\").css(\"color\", rancolor);\r\n  $(\"#tw-icon\").css(\"color\", rancolor);\r\n  $(\"#tb-icon\").css(\"color\", rancolor);\r\n  $(\"h2\").css(\"fontSize\", \"50px\");\r\n});\r\n\r\nexport default AppWrapper\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport AppWrapper from \"./App\"\r\n\r\nReactDOM.render(<AppWrapper />, document.getElementById(\"App\"));\r\n\r\n"],"sourceRoot":""}